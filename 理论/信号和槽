信号和槽是针对 “实例” ，不是针对 “某个类”
对于类A和类B，只能对A的实例A1和B的实例B2进行信号和槽的绑定

比如  
A.h
signals:
    void isUploadChanged(bool arg);
    void isDownloadChanged(bool arg);
    
B.h
public slots：
    void setIsUpload(bool arg);
    void setIsDownload(bool arg);
    
又有A的实例A1，B的实例B2，那么可以通过connect来绑定 A1的isUploadChanged和B2的setIsUpload，以及isDownloadChanged和setIsDownload
操作如下：
        connect(A1,&A::isUploadChanged,B2,&B::setIsUpload);
        connect(A1,&A::isDownloadChanged,B2,&B::setIsDownload);

-----------------------------------------------------------------------------------------------------------------------
SIGNAL

Execution of the code following the emit statement will occur once all slots have returned
当使用emit发送信号的时候，emit会阻塞，知道所有挂到当前signal上的slot都执行完毕，才会继续执行emit后面的代码，这些slot会被挨个执行，而
不是并发执行，具体的顺序和connect到signal时的早晚有关
但是，当使用queued connections的时候，会先执行emit后面的代码，slot会被延后执行

queued connections：？

可以再任何代码段中emit某个对象的某个信号(因为信号时public的)，但是一般不建议这样做，一般都是由信号持有类或者其子类来完成这个动作

signal的具体实现由moc来完成，因此不要在h和cpp文件中尝试实现signal，同时signal的返回值始终是void

---------------------------------------------------------------------------------------------------------------------
SLOT

slot函数就是普通的c++函数，而且可以被当做普通函数来调用，唯一特别的地方是：信号可以连接到slot函数上。

因为slot函数会被signal调用，所以即使slot是private的(不想被别的类显示主动调用时)，那么通过connect打通signal和slot以后，还是可以
被别的类通过emit的方式来调用的，这就是slot和普通函数不同的地方(普通函数只要是private，那么无论怎么样别的类都没法调用)

slot也可以被声明为虚函数，这点非常有用

slot和signal在使用上和“回调函数”比较相似————都是调用一个函数，来触发另一个函数。slot和signal的速度从理论上说要稍显缓慢，但是高灵活
性弥补了这微不足道的“慢”。 对比一下，使用slot和signal会比“回调函数”慢 十次 非虚函数调用，而这十次调用的时间比new或delete还要快。
（可见，分配内存的速度还是比较慢的）

---------------------------------------------------------------------------------------------------------------------

当某个实例(继承自QObject)被delete的时候，它会发一个destoryed信号，我们可以通过添加slot到某个实例的destoryed信号上来进行进一步的
善后工作。

正常情况下，都是使用QObject::connect函数来完成signal和slot的捆绑

connect还能结合c++11标准使用，具体见帮助文档

---------------------------------------------------------------------------------------------------------------------
(*)进阶用法

可以通过QObject::sender函数来获取某个信号的发送实例方，比如有实例A1，A2，A3，B1，B1把自己的slot1依次注册到A1，A2，A3的相同信号
上，那么此时这三个实例发信号都会触发slot1，这个时候我就要判断是谁给我发的信号，这里就可以使用sender












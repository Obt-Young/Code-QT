#1  -  QT QUICK和QT QML都是 QT的module，QUICK 为 QML提供基础支撑，让QML能够作为一种语言顺利的被使用。
        QML engine和QML语法规则都是由QUICK提供的。可以理解为QUICK是QML的支撑库

#2  -  QUICK即提供了QML的语法基础，又提供了使用c++扩展QML的途径

            小结：可以理解为  QUICK是c++写的一套库，这个库就是QML语言，同时QUICK还开放了一些接口，让用户注册自己的c++代码成为QML类型

#3  -  可视画布：QUICK提供了一个包含z值的平面坐标系，作为可视画布，以供开发者布局自己的组件。
            针对此画布，在编程时主要从如下三点着手
            1）坐标系统，最左上角的坐标值为(0,0)，x，y值向右下角开始递增
            2）父子关系，任何组件都要明确自己在父子关系树中的位置
            3）场景布景(渲染)，当使用1）和2）完成了总体布局和依附关系后，需要使用类似于OpenGL这样库来对各个组件进行渲染

       可视画布编程主要完成的就是上述1,2,3步，完成后，程序也就完成了

#3.1  -  坐标系统：从左上角开始，如果某个组件有父组件，那么其坐标系统是针对父组件的，是相对坐标系。
            Rectangle{
                id:r_1
                x:10
                y:10
                Rectangel{
                    id:r_2
                    x:0
                    y:0
                }
            }
        则r_2在r_1的最左上角

#3.2  -  父子关系：在qml编程中，放在谁内部，谁就是parent，如果某个item的parent被设置成null，那么这个item将不被实例化
       
       对于同级的子item，其绘制顺序是按照从上到下的，所以后书写的占有更高的z值
        Rectangle {
          color: "#272822"
          width: 320
          height: 480

             Rectangle {
                 y: 64
                 width: 256
                 height: 256
                 color: "green"
            }

            Rectangle {
                 x: 64
                 y: 172
                 width: 256
                 height: 256
                color: "blue"
            }
         }  
         这里，blue的方块就会覆盖green

       对于不同子树的item，z值互不影响，即父亲辈的item之间比较z值，子辈item的z值即使比其“大爷”要大，也会因为其父亲的z值比“大爷”小而被覆盖
            
                Rectangle {
                      color: "#272822"
                      width: 320
                      height: 480

                      Rectangle {
                          id:r_1
                          y: 64
                          z: 1
                          width: 256
                          height: 256
                          color: "green"
                
                          Rectangle {
                              id:r_2
                              x: 192
                              y: 64
                              z: 2000       //这里的2000要大于r_3的2，但是还是会被r_3盖上，因为r_1的z是1，要小于r_3的2
                              width: 128
                              height: 128
                              color: "red"
                          }
                      }

                      Rectangle {
                          id:r_3
                          x: 64
                          y: 192
                          z: 2
                          width: 256
                          height: 256
                          color: "blue"
                      }
                  }
            
#3.3  -  渲染：见
        Qt 5.6
        Qt Quick
        Qt Quick Scene Graph


#4  -  用户输入
        UI接收的输入有如下几种：
                触摸
                鼠标  
                键盘
                其他设备(传感器，加速器，摄像头...)             见QT5.6/QT SENSORS
                    
#5  -  布局
       常用的布局：
          x,y
          anchors
          row column grid Flow ...  见QT5.6/QT QUICK/ITEM POSITIONERS
          layout rowlayout ... 见 QT5.6/QT QUICK LAYOUTS
          Right-To-Left Support  见 QT5.6/QT QUICK/Right-to-left User Interfaces

#6  -  组态(state)
       所有的继承自Item的QML组件都有state属性，用来定义一套动作，可以理解为宏，即当前组件切换到相应的state后，会触发state中的change下的所有动

        state在组件中是一个列表，所以其定义一般如下

        Rectangle
        {
            id:r_1
            states:[                            //定义组态列表，以供使用，注意这里相当于定义一系列模板
                State{
                    name:"state_1"
                    changes:[
                        PropertyChanges{target:r_2;color:"green"}   //当r_1切换至state_1组态时，触发此change，导致r_2的color变为green
                        PropertyChanges{target:r_2;state:"state_2"}     //当r_1切换至state_1组态时，触发此change，导致r_2的状态切换至state_1
                    ]
                }
                State{
                    name:"state_2"
                    changes:[
                        PropertyChanges{target:r_1;state:"state_1"}     //当r_1切换至state_2组态时，让r_1切换至组态state_1
                    ]
                }

            ]
            state:state_1                       //定义当前Rectangle的state初始值，这个值要么是默认值，要么一定是states中的某一个name
        }

        Rectangel{
            id:r_2
            states:[
                State{
                    name:"state_1"
                    changes:[
                        PropertyChanges{target:r_1;state:"state_2"}     //当r_2切换至state_1组态时，让r_1切换至组态state_2
                    }
                }
            ]

        }

       （*） 疑问：这样互相切换还能互相设置state，及其有可能形成 “死循环” ，这个问题怎么解决的？

        state还有一个when属性，用来定义一个触发条件。当达到条件是，此state被触发，进而执行changes

        小结：至此，state的切换有两种方式：1）显式赋值，因为state相当于Item的一个property，所以只要是可以给属性赋值的地方，都可以给state赋值
                                            2）隐式触发，这个有点类似于注册信号，当满足什么条件，会进入这个state
        （*）注意：state是属性，states是属性集合
                state作为属性，某一个时刻只可能有一个值
                states是state可选择的所有模板，相当于定义了一个枚举类型，然后让state从里面选一个

        state必须与changes结合起来使用才有意义，而对于一个Item，其change有如下几种：(这些change都可以作为changes的成员)
            1）PropertyChange
            2）ParentChange
            3）AnchorChanges
            4）StateChangeScript
        具体的使用，见帮助文档

#7  -  转换
	state完成的是突变，即一个组态瞬间变成另一个组态，没有过渡

	transition就完成了组态之间变化的“渐变”

	例子:
		  Rectangle {
		      width: 75; height: 75
		      id: button
		      state: "RELEASED"

		      MouseArea {
		          anchors.fill: parent
		          onPressed: button.state = "PRESSED"
		          onReleased: button.state = "RELEASED"
		      }
	
		      states: [
		          State {
		              name: "PRESSED"
		              PropertyChanges { target: button; color: "lightblue"}
		          },
		          State {
		              name: "RELEASED"
		              PropertyChanges { target: button; color: "lightsteelblue"}
		          }
		      ]

		      transitions: [
		          Transition {
		              from: "PRESSED"
		              to: "RELEASED"
		              ColorAnimation { target: button; duration: 100}
		          },
		          Transition {
		              from: "RELEASED"
		              to: "PRESSED"
		              ColorAnimation { target: button; duration: 100}
		          }
		      ]
		  }

	注：transition需要依赖state属性

#8  -  动画
	Animation是QT中所有动画的基类
	具体见帮助文档

	state、transition和animation  是主要用来实现动画效果。也可以用来实现快照效果。
	

#9  -  model，view，data storage
	ListView的属性，只能被ListView中的delegate修改。源码中是通过ListView中的View属性就定义了一个ListView的列表样式，而操作者只能是delegate。
	同上，ListView.view.model属性是在ListView.view中的，理所应当可以被delegate处理

#10  -  repeater
	实例化某个model中的数据
	和ListView一样，reperter也有model和delegate属性，delegate表示实例化出来的每条的样式，model存放数据
	（*）一般情况下，reperter都和row和column一起使用，从而方便安排实例化出来的各个组件
	
	reperter不适合用来实例化大数据量，比如model中的数据很多，这个时候要考虑使用ListView和scroll的结合，实现“按需加载”

	注意：reperter只能实例化继承自Item的组件，而不是QObject的组件，也就是说reperter的delegate属性，只能指向继承自Item的组件

	model可以是如下几种：
		1）一个整数，表示要创建多少个delegate
		2）任意一种model，比如ListModel，只要继承自QAbstractItemModel 即可
		3）一个字符串列表
		4）一个Object列表

	reperter有两个信号，分别表示有数据加入和有数据移除：itemAdded(int index, Item item)
							    itemRemoved(int index, Item item)
		信号自动发送，可以使用onItemAdded和onItemRemoved接收处理


#11  -  C++ Data Models
	


#12  -  Particles And Graphical Effects


#13  -  Convenience Types


















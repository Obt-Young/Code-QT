#1  --  使用第三方库的时候，无法通过qml直接调用，需要使用c++创建一个中间层，然后实例化成单例，注册到qml engine的rootcontext中，然后qml调用中间层，中间层调用第三方库


#2  --  Registering an Instantiable Object Type
Any QObject-derived C++ class can be registered as the definition of a QML object type. Once a class is registered with the QML type system, the class can be declared and instantiated like any other object type from QML code. Once created, a class instance can be manipulated from QML; as Exposing Attributes of C++ Types to QML explains, the properties, methods and signals of any QObject-derived class are accessible from QML code.
To register a QObject-derived class as an instantiable QML object type, call qmlRegisterType() to register the class as QML type into a particular type namespace. Clients can then import that namespace in order to use the type.
For example, suppose there is a Message class with author and creationDate properties:

  class Message : public QObject
  {
      Q_OBJECT
      Q_PROPERTY(QString author READ author WRITE setAuthor NOTIFY authorChanged)
      Q_PROPERTY(QDateTime creationDate READ creationDate WRITE setCreationDate NOTIFY creationDateChanged)
  public:
      // ...
  };

This type can be registered by calling qmlRegisterType() with an appropriate type namespace and version number. For example, to make the type available in the com.mycompany.messaging namespace with version 1.0:

  qmlRegisterType<Message>("com.mycompany.messaging", 1, 0, "Message");         //具体的源码文件叫什么，这里不关心，只要通过engine->addImportPath()方法定位到c++源码根目录即可，engine会自动搜索

The type can be used in an object declaration from QML, and its properties can be read and written to, as per the example below:

  import com.mycompany.messaging 1.0

  Message {
      author: "Amelie"
      creationDate: new Date()
  }


#3  --  Registering Singleton Objects with a Singleton Type
A singleton type enables properties, signals and methods to be exposed in a namespace without requiring the client to manually instantiate an object instance. QObject singleton types in particular are an efficient and convenient way to provide functionality or global property values.
    单例类在QQmlContext间也是通用的，可以说比Context还要“全局”，它是伴随着QmlEngine生命周期的，当Engine停止时，其才会销毁，可以用来存放进程运行信息，比如命令行参数，监听端口号集合，总控进程id等等
    或者提供一些全局的函数，比如通用工具方法等等
    
A QObject singleton type can be interacted with in a manner similar to any other QObject or instantiated type, except that only one (engine constructed and owned) instance will exist, and it must be referenced by type name rather than id. Q_PROPERTYs of QObject singleton types may be bound to, and Q_INVOKABLE functions of QObject module APIs may be used in signal handler expressions. This makes singleton types an ideal way to implement styling or theming, and they can also be used instead of ".pragma library" script imports to store global state or to provide global functionality.
Once registered, a QObject singleton type may be imported and used like any other QObject instance exposed to QML. The following example assumes that a QObject singleton type was registered into the "MyThemeModule" namespace with version 1.0, where that QObject has a QColor "color" Q_PROPERTY:


  (*)具体如何注册为单例，详见qmlRegisterSingletonType方法

  import MyThemeModule 1.0 as Theme     //注册为单例

  Rectangle {
      color: Theme.color                //使用单例
  }

A QJSValue may also be exposed as a singleton type, however clients should be aware that properties of such a singleton type cannot be bound to.
See qmlRegisterSingletonType() for more information on how implement and register a new singleton type, and how to use an existing singleton type.
Note: Enum values for registered types in QML should start with a capital. 


#4  --  Setting a Simple Context Property
For example, here is a QML item that refers to a currentDateTime value that does not exist in the current scope:

  // MyItem.qml
  import QtQuick 2.0

  Text { text: currentDateTime }

This currentDateTime value can be set directly by the C++ application that loads the QML component, using QQmlContext::setContextProperty():

  QQuickView view;
  view.rootContext()->setContextProperty("currentDateTime", QDateTime::currentDateTime());
  view.setSource(QUrl::fromLocalFile("MyItem.qml"));
  view.show();

Note: Since all expressions evaluated in QML are evaluated in a particular context, if the context is modified, all bindings in that context will be re-evaluated. Thus, context properties should be used with care outside of application initialization, as this may lead to decreased application performance. 












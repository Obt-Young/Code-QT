#1  ---  QAbstractItemModel是大多数模型类的基类，即Model的祖先，比如QAbstractListModel，QAbstractTreeModel，QAbstractTableModel都是继承自QAbstractItemModel
	 QAbstractItemView 是大多数试图类的基类，即View的祖先， 比如QListView，QTreeView，QTableView都继承自QAbstractItemView
	 QAbstractItemDelegate是所有Delegate的抽象基类，这个基类又有两个分支：QStyleItemDelegate和QItemDelegate。如果想自己实现一个Delegate，那么需要从这两个
	 类中选择一个继承，一般选择QStyleItemDelegate。(这里就给Delegate定性了)

		以上是针对QT c++编程时而言。那么在qml结合c++编程的场景下，该如何使用MVD模型呢：
			1）M ，qml中有现成的ListModel、XmlListModel等可以使用
			2）V ，qml中有ListView、TableView等可以使用
			3）D ，使用Item，然后给一个id，在Item中定义想要元素(Button，Rectangle等)，然后赋值给V中的delegate即可

		职责：M，提供数据，一般是c++编写，数据格式一般是json，xml等(应该也能提供excel，估计只要是格式化的数据，都OK)
		      V，展示页整体布局，比如是列表布局(List)，还是表格布局(Table)，还是树状布局(Tree)
		      D，展示也里面的内容，有几个Button，有几个Rectangle，每个元素张什么样等等。
		关系：M传数据给D，D处理后给V赋值，V展示

		一个简单的例子：通讯录中，M提供数据，V表明整体结构是列表状，D修饰列表中每一条的格式(字体，颜色等)


		猜测：由于M和V，系统都提供同名的类(List,Tree,Table)，可以猜测QT对于这两块已经做了很好的互通，剩下的只要我们定义一下D的格式就好（还是很简单的）


===============================================================================================================================================================================

#2  ---	 ListView
		要使用ListView，必须制定一个Model和一个Delegate。
		
		Model ，可以是qml的内建类型，比如ListModel，XmlListModel，也可以自己定义一个c++类，但是！！！必须从自QAbstractItemModel或自QAbstractListModel继承
		Delegate ， 可以理解为自定义一个qml文件，然后最外层是Item，即Item{ ... }，里面有多少东西，自己决定

		所以可以引申为 M(Model) V(View) I(Item)

	(!!!)格式
		ListView{

			delegate:xxx
			model:xxx
		}

===============================================================================================================================================================================

#3  ---  Model提供数据的增删改查，以及数据的存储(module类同时提供处理和存储，像个微型数据库)，
		

比如ListModel的方法就有如下这些：
		
		append(jsobject dict)						//尾部追加（增）
		clear()								
		object get(int index)						//查
		insert(int index, jsobject dict)				//插入（增）
		move(int from, int to, int n)					//改
		remove(int index, int count)					//删
		set(int index, jsobject dict)					//改
		setProperty(int index, string property, variant value)
		sync() 								//commit提交

TableModel没有可用的QML实例，只提供了QAbstractTableModel类，我们可以从这个类继承，然后实现其中的方法，进而把这个c++类通过registertype注入到QML环境中，并定义成一个QML类型来使用
方法有：
		
enum LayoutChangeHint
QAbstractTableModel(QObject *)
~QAbstractTableModel()
beginInsertColumns(const QModelIndex &, int , int )
beginInsertRows(const QModelIndex &, int , int )
beginMoveColumns(const QModelIndex &, int , int , const QModelIndex &, int ) : bool
beginMoveRows(const QModelIndex &, int , int , const QModelIndex &, int ) : bool
beginRemoveColumns(const QModelIndex &, int , int )
beginRemoveRows(const QModelIndex &, int , int )
beginResetModel()
blockSignals(bool ) : bool
buddy(const QModelIndex &) const : QModelIndex
canDropMimeData(const QMimeData *, Qt::DropAction , int , int , const QModelIndex &) const : bool
canFetchMore(const QModelIndex &) const : bool
changePersistentIndex(const QModelIndex &, const QModelIndex &)
changePersistentIndexList(const QModelIndexList &, const QModelIndexList &)
childEvent(QChildEvent *)
children() const : const QObjectList &
columnCount(const QModelIndex &) const : int
columnsAboutToBeInserted(const QModelIndex &, int , int )
columnsAboutToBeMoved(const QModelIndex &, int , int , const QModelIndex &, int )
columnsAboutToBeRemoved(const QModelIndex &, int , int )
columnsInserted(const QModelIndex &, int , int )
columnsMoved(const QModelIndex &, int , int , const QModelIndex &, int )
columnsRemoved(const QModelIndex &, int , int )
connect(const QObject *, const char *, const QObject *, const char *, Qt::ConnectionType ) : QMetaObject::Connection
connect(const QObject *, const QMetaMethod &, const QObject *, const QMetaMethod &, Qt::ConnectionType ) : QMetaObject::Connection
connect(const QObject *, const char *, const char *, Qt::ConnectionType ) const : QMetaObject::Connection
connect(const QObject *, PointerToMemberFunction , const QObject *, PointerToMemberFunction , Qt::ConnectionType ) : QMetaObject::Connection
connect(const QObject *, PointerToMemberFunction , Functor ) : QMetaObject::Connection
connect(const QObject *, PointerToMemberFunction , const QObject *, Functor , Qt::ConnectionType ) : QMetaObject::Connection
connectNotify(const QMetaMethod &)
createIndex(int , int , void *) const : QModelIndex
createIndex(int , int , quintptr ) const : QModelIndex
customEvent(QEvent *)
d_ptr : QScopedPointer<QObjectData>
data(const QModelIndex &, int ) const : QVariant
dataChanged(const QModelIndex &, const QModelIndex &, const QVector<int> &)
deleteLater()
destroyed(QObject *)
disconnect(const QObject *, const char *, const QObject *, const char *) : bool
disconnect(const QObject *, const QMetaMethod &, const QObject *, const QMetaMethod &) : bool
disconnect(const char *, const QObject *, const char *) const : bool
disconnect(const QObject *, const char *) const : bool
disconnect(const QMetaObject::Connection &) : bool
disconnect(const QObject *, PointerToMemberFunction , const QObject *, PointerToMemberFunction ) : bool
disconnectNotify(const QMetaMethod &)
dropMimeData(const QMimeData *, Qt::DropAction , int , int , const QModelIndex &) : bool
dropMimeData(const QMimeData *, Qt::DropAction , int , int , const QModelIndex &) : bool
dumpObjectInfo()
dumpObjectTree()
dynamicPropertyNames() const : QList<QByteArray>
endInsertColumns()
endInsertRows()
endMoveColumns()
endMoveRows()
endRemoveColumns()
endRemoveRows()
endResetModel()
event(QEvent *) : bool
eventFilter(QObject *, QEvent *) : bool
fetchMore(const QModelIndex &)
findChild(const QString &, Qt::FindChildOptions ) const : T
findChildren(const QString &, Qt::FindChildOptions ) const : QList<T>
findChildren(const QRegExp &, Qt::FindChildOptions ) const : QList<T>
findChildren(const QRegularExpression &, Qt::FindChildOptions ) const : QList<T>
flags(const QModelIndex &) const : Qt::ItemFlags
flags(const QModelIndex &) const : Qt::ItemFlags
hasChildren(const QModelIndex &) const : bool
hasIndex(int , int , const QModelIndex &) const : bool
headerData(int , Qt::Orientation , int ) const : QVariant
headerDataChanged(Qt::Orientation , int , int )
index(int , int , const QModelIndex &) const : QModelIndex
index(int , int , const QModelIndex &) const : QModelIndex
inherits(const char *) const : bool
insertColumn(int , const QModelIndex &) : bool
insertColumns(int , int , const QModelIndex &) : bool
insertRow(int , const QModelIndex &) : bool
insertRows(int , int , const QModelIndex &) : bool
installEventFilter(QObject *)
isSignalConnected(const QMetaMethod &) const : bool
isWidgetType() const : bool
isWindowType() const : bool
itemData(const QModelIndex &) const : QMap<int, QVariant>
killTimer(int )
layoutAboutToBeChanged(const QList<QPersistentModelIndex> &, QAbstractItemModel::LayoutChangeHint )
layoutChanged(const QList<QPersistentModelIndex> &, QAbstractItemModel::LayoutChangeHint )
match(const QModelIndex &, int , const QVariant &, int , Qt::MatchFlags ) const : QModelIndexList
metaObject() const : const QMetaObject *
mimeData(const QModelIndexList &) const : QMimeData *
mimeTypes() const : QStringList
modelAboutToBeReset()
modelReset()
moveColumn(const QModelIndex &, int , const QModelIndex &, int ) : bool
moveColumns(const QModelIndex &, int , int , const QModelIndex &, int ) : bool
moveRow(const QModelIndex &, int , const QModelIndex &, int ) : bool
moveRows(const QModelIndex &, int , int , const QModelIndex &, int ) : bool
moveToThread(QThread *)
objectName() const : QString
objectNameChanged(const QString &)
parent() const : QObject *
parent(const QModelIndex &) const : QModelIndex
persistentIndexList() const : QModelIndexList
property(const char *) const : QVariant
receivers(const char *) const : int
removeColumn(int , const QModelIndex &) : bool
removeColumns(int , int , const QModelIndex &) : bool
removeEventFilter(QObject *)
removeRow(int , const QModelIndex &) : bool
removeRows(int , int , const QModelIndex &) : bool
resetInternalData()
revert()
roleNames() const : QHash<int, QByteArray>
rowCount(const QModelIndex &) const : int
rowsAboutToBeInserted(const QModelIndex &, int , int )
rowsAboutToBeMoved(const QModelIndex &, int , int , const QModelIndex &, int )
rowsAboutToBeRemoved(const QModelIndex &, int , int )
rowsInserted(const QModelIndex &, int , int )
rowsMoved(const QModelIndex &, int , int , const QModelIndex &, int )
rowsRemoved(const QModelIndex &, int , int )
sender() const : QObject *
senderSignalIndex() const : int
setData(const QModelIndex &, const QVariant &, int ) : bool
setHeaderData(int , Qt::Orientation , const QVariant &, int ) : bool
setItemData(const QModelIndex &, const QMap<int, QVariant> &) : bool
setObjectName(const QString &)
setParent(QObject *)
setProperty(const char *, const QVariant &) : bool
sibling(int , int , const QModelIndex &) const : QModelIndex
sibling(int , int , const QModelIndex &) const : QModelIndex
signalsBlocked() const : bool
sort(int , Qt::SortOrder )
span(const QModelIndex &) const : QSize
startTimer(int , Qt::TimerType ) : int
staticMetaObject : const QMetaObject
staticQtMetaObject : const QMetaObject
submit() : bool
supportedDragActions() const : Qt::DropActions
supportedDropActions() const : Qt::DropActions
thread() const : QThread *
timerEvent(QTimerEvent *)
tr(const char *, const char *, int ) : QString

===============================================================================================================================================================================

#4  ---  小结

	在QML环境，肯定都是用QML类来处理的。
	
	model		负责数据的存储和提供对数据的操作方法
	delegate	负责每一条数据的元素组成和元素格式
	view		负责全部，包括表格样式，怎么使用model的方法来操作数据，从而展示数据。

	view是核心，在view中会调用model和delegate，M和D只是V的元素

===============================================================================================================================================================================







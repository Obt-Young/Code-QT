#1  ---  通用的组件定义格式

Rectangle {
    id: photo                                               // id on the first line makes it easy to find an object

    property bool thumbnail: false                          // property declarations
    property alias image: photoImage.source

    signal clicked                                          // signal declarations

    function doSomething(x)                                 // javascript functions
    {
        return x + photoImage.width
    }

    color: "gray"                                           // object properties
    x: 20; y: 20; height: 150                               // try to group related properties together
    width: {                                                // large bindings
        if (photoImage.width > 200) {
            photoImage.width;
        } else {
            200;
        }
    }

    Rectangle {                                             // child objects
        id: border
        anchors.centerIn: parent; color: "white"

        Image { id: photoImage; anchors.centerIn: parent }
    }

    states: State {                                         // states(快照，里面存放states父类，此例中为photo，的所有想要设置的属性值，以产生一个快照)
        name: "selected"				    // 可以通过信号或者其他方式跳转至这个快照，以实现父类实例的状态快速切换
        PropertyChanges { target: border; color: "red" }
    }

    transitions: Transition {                               // transitions(配合states使用，因为直接在state间切换，会比较快速，是瞬时完成的，如果想要缓慢的切换，那么可以使用transitions)
        from: ""; to: "selected"
        ColorAnimation { target: border; duration: 200 }
    }
}


#2  ---  使用组归纳写法，减少罗列法

罗列法：	
Rectangle {
    anchors.left: parent.left;
    anchors.top: parent.top;
    anchors.right: parent.right;
    anchors.leftMargin: 20
}
Text {
    text: "hello"
    font.bold: true;
    font.italic: true;
    font.pixelSize: 20;
    font.capitalization: Font.AllUppercase
}

归纳写法：
Rectangle {
    anchors { 
	left: parent.left;
	top: parent.top;
	right: parent.right;
	leftMargin: 20
    }
}
Text {
    text: "hello"
    font {
	bold: true;
	italic: true;
	pixelSize: 20;
	capitalization: Font.AllUppercase
    }
}





















QList<T>
这是最通用的一个容器类。它里面存储了给定类型T的一个列表，这个列表可以使用下标来访问。其实，在底层QList被实现为一个数组，
确保基于下标的访问非常快速。可以使用QList::append()和QList::prepend()向链表的两端添加元素，或者使用QList::insert()在链表的中间插入元素。
并且，和其他容器相比，更重要的是，QList在可执行文件中展开的代码量是非常少的，是经过高度优化的。QStringList就继承自QList<QString>。
QLinkedList<T>
这个容器类类似于QList，只不过它是使用迭代器来访问，而不是下标。当从中间插入时，它的效率比QList还要高。并且，它有更好的迭代器语义。
即指向QLinkedList中某个元素的迭代器，只有该元素存在就会一直保持有效，而指向QList中某元素的迭代器，在向QList进行任意插入或删除时都会导致
该迭代器失效。
QVector<T>
这个容器类会在一块相邻的内存中存储一个给定类型的值的数组。在一个vector的前端或中间插入是非常慢的，因为这会导致大量现存的元素移动以为新的
元素腾出位置。
QStack<T>
这个容器类继承自QVector，提供了“先入后出”的语义。
QQueue<T>
这个容器类继承自QList，提供了“先入先出”的语义。
QSet<T>
这个容器类提供了不允许有重复值的集合，提供快速的查找效率。
QMap<Key, T>
这个容器类提供了一个字典形式的容器，它会将Key类型的值映射到T类型的value上。通常情况下，每一个key只关联一个值。并且，QMap会按Key的顺序存储
相应的值；所以，如果不关心元素的存储顺序，QHash是一个更好的选择。
QMaultiMap<Key, T>
这个容器类继承自QMap，提供了多值的字典，也就是说，该容器中的一个key可以关联多个值。
QHash<Key, T>
这个容器类的API和QMap几乎一样，但它提供了更快速的查找操作。并且，该类会按任意的顺序存储值。
QMultiHash<Key, T>
这个容器类继承自QHash，提供了多值hash表。
